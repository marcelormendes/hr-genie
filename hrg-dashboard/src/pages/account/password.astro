---
import DashboardLayout from "../../layouts/DashboardLayout.astro";

/* SSR auth check removed */

// Initial empty state - data will be loaded client-side
const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";
---

<DashboardLayout title="Change Password - HR Genie" activePage="password">
  <h1 class="text-xl font-semibold mb-6">Change Password</h1>

  <div id="responseMessageContainer" class="mb-4">
    <div
      id="errorMessage"
      class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="errorText"></p>
    </div>
    <div
      id="successMessage"
      class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="successText"></p>
    </div>
  </div>

  <form id="passwordForm" class="space-y-4">
    <div>
      <label
        for="current_password"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        Current Password
      </label>
      <input
        type="password"
        id="current_password"
        name="current_password"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
      />
    </div>

    <div>
      <label
        for="new_password"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        New Password
      </label>
      <input
        type="password"
        id="new_password"
        name="new_password"
        required
        minlength="8"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
      />
    </div>

    <div>
      <label
        for="confirm_password"
        class="block text-sm font-medium text-gray-700 mb-1"
      >
        Confirm New Password
      </label>
      <input
        type="password"
        id="confirm_password"
        name="confirm_password"
        required
        minlength="8"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
      />
    </div>

    <div>
      <button
        type="submit"
        id="changePasswordButton"
        class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
      >
        Change Password
      </button>
    </div>
  </form>
</DashboardLayout>

<script>
  // Backend URL
  const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";

  // Elements
  const passwordForm = document.getElementById("passwordForm");
  const currentPasswordInput = document.getElementById(
    "current_password"
  ) as HTMLInputElement;
  const newPasswordInput = document.getElementById(
    "new_password"
  ) as HTMLInputElement;
  const confirmPasswordInput = document.getElementById(
    "confirm_password"
  ) as HTMLInputElement;
  const changePasswordButton = document.getElementById(
    "changePasswordButton"
  ) as HTMLButtonElement;
  const errorMessageDiv = document.getElementById("errorMessage")!;
  const errorTextP = document.getElementById("errorText")!;
  const successMessageDiv = document.getElementById("successMessage")!;
  const successTextP = document.getElementById("successText")!;

  // Message display helpers
  function showMessage(type: "success" | "error", text: string) {
    clearMessages();
    if (type === "success") {
      successTextP.textContent = text;
      successMessageDiv.classList.remove("hidden");
    } else {
      errorTextP.textContent = text;
      errorMessageDiv.classList.remove("hidden");
    }
  }

  function clearMessages() {
    errorMessageDiv.classList.add("hidden");
    successMessageDiv.classList.add("hidden");
  }

  // Initialize page
  document.addEventListener("DOMContentLoaded", () => {
    // First, check if user is authenticated
    checkAuthStatus();
    setupFormListener();
  });

  async function checkAuthStatus() {
    try {
      const response = await fetch(`${backendUrl}/api/v1/auth/me`, {
        credentials: "include",
      });
      if (!response.ok) {
        // Redirect to login if not authenticated
        window.location.href = "/login?error=unauthorized";
      }
      // If OK, proceed (form listener will handle interaction)
    } catch (error) {
      console.error("Auth check failed:", error);
      showMessage(
        "error",
        "Could not verify authentication status. Please try logging in again."
      );
      // Optionally disable the form
      if (passwordForm) (passwordForm as HTMLFormElement).reset();
      if (changePasswordButton) changePasswordButton.disabled = true;
    }
  }

  function setupFormListener() {
    passwordForm?.addEventListener("submit", async (e) => {
      e.preventDefault();
      clearMessages();
      changePasswordButton.disabled = true;
      changePasswordButton.textContent = "Changing...";

      const currentPassword = currentPasswordInput.value;
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Client-side validation
      if (newPassword !== confirmPassword) {
        showMessage("error", "New passwords do not match.");
        changePasswordButton.disabled = false;
        changePasswordButton.textContent = "Change Password";
        return;
      }
      if (newPassword.length < 8) {
        showMessage("error", "New password must be at least 8 characters.");
        changePasswordButton.disabled = false;
        changePasswordButton.textContent = "Change Password";
        return;
      }

      try {
        const response = await fetch(`${backendUrl}/api/v1/account/password`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
          body: JSON.stringify({ currentPassword, newPassword }),
        });

        if (!response.ok) {
          const err = await response.json().catch(() => ({}));
          // Use specific message from backend if available
          if (response.status === 400 && err.message) {
            throw new Error(err.message);
          } else if (response.status === 401) {
            // Handle incorrect current password specifically
            throw new Error("Incorrect current password.");
          }
          throw new Error("Failed to change password. Please try again.");
        }

        // Clear form on success
        (passwordForm as HTMLFormElement).reset();
        // Redirect to profile page with success message
        window.location.href = "/account/profile?status=password_changed";
      } catch (error) {
        showMessage(
          "error",
          error instanceof Error ? error.message : "Password change failed"
        );
      } finally {
        changePasswordButton.disabled = false;
        changePasswordButton.textContent = "Change Password";
      }
    });
  }
</script>
