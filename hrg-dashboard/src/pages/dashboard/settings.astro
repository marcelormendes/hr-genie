---
import DashboardLayout from "../../layouts/DashboardLayout.astro";

/* SSR auth check removed */

// TypeScript interfaces for client-side data
interface UserSettings {
  email_notifications_enabled: boolean;
  slack_notifications_enabled: boolean;
  default_job_visibility: string; // Assuming 'public', 'private'
  integration_wellfound_enabled: boolean;
  integration_google_drive_enabled: boolean;
}

interface IntegrationStatus {
  wellfound?: { connected: boolean; account_id?: string };
  googleDrive?: { connected: boolean; account_email?: string };
  slack?: { connected: boolean; workspace?: string };
}

// Initial empty state - data will be loaded client-side
const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";
---

<DashboardLayout title="Settings - HR Genie" activePage="settings">
  <h1 class="text-2xl font-bold mb-6">Settings</h1>

  <div id="loading-indicator" class="mb-6 text-center py-4">
    <div
      class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"
    >
    </div>
    <p class="mt-2 text-gray-600">Loading settings...</p>
  </div>

  <div id="responseMessageContainer" class="mb-4">
    <div
      id="errorMessage"
      class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="errorText"></p>
    </div>
    <div
      id="successMessage"
      class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="successText"></p>
    </div>
  </div>

  <div id="settings-content" class="space-y-8 hidden">
    <!-- Notification Settings -->
    <section>
      <h2 class="text-lg font-semibold mb-4">Notifications</h2>
      <form
        id="notificationSettingsForm"
        class="bg-white p-6 border border-gray-200 rounded-lg"
      >
        <div class="space-y-4">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="email_notifications"
              name="email_notifications"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            />
            <label
              for="email_notifications"
              class="ml-2 block text-sm text-gray-700"
            >
              Enable Email Notifications
            </label>
          </div>
          <div class="flex items-center">
            <input
              type="checkbox"
              id="slack_notifications"
              name="slack_notifications"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            />
            <label
              for="slack_notifications"
              class="ml-2 block text-sm text-gray-700"
            >
              Enable Slack Notifications (requires Slack integration)
            </label>
          </div>
        </div>
        <div class="mt-6">
          <button
            type="submit"
            id="saveNotificationButton"
            class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
          >
            Save Notification Settings
          </button>
        </div>
      </form>
    </section>

    <!-- Job Settings -->
    <section>
      <h2 class="text-lg font-semibold mb-4">Job Postings</h2>
      <form
        id="jobSettingsForm"
        class="bg-white p-6 border border-gray-200 rounded-lg"
      >
        <div>
          <label
            for="default_job_visibility"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Default Job Visibility
          </label>
          <select
            id="default_job_visibility"
            name="default_job_visibility"
            class="w-full md:w-1/2 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
          >
            <option value="public">Public</option>
            <option value="private">Private (Internal Only)</option>
          </select>
        </div>
        <div class="mt-6">
          <button
            type="submit"
            id="saveJobButton"
            class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
          >
            Save Job Settings
          </button>
        </div>
      </form>
    </section>

    <!-- Integrations -->
    <section>
      <h2 class="text-lg font-semibold mb-4">Integrations</h2>
      <div class="bg-white p-6 border border-gray-200 rounded-lg">
        <div class="space-y-4">
          <!-- Slack Integration -->
          <div
            class="flex items-center justify-between py-2 border-b border-gray-100"
          >
            <div class="flex items-center">
              <img
                src="/icons/slack.svg"
                alt="Slack Logo"
                class="h-6 w-6 mr-3"
              />
              <span class="text-sm font-medium text-gray-700">Slack</span>
            </div>
            <div id="slack-status">
              <button
                id="connect-slack"
                class="px-3 py-1 bg-indigo-100 text-indigo-700 text-xs font-medium rounded-md hover:bg-indigo-200"
              >
                Connect
              </button>
              <span
                id="slack-connected-text"
                class="hidden text-sm text-green-600 font-medium"
                >Connected</span
              >
            </div>
          </div>

          <!-- Google Drive Integration -->
          <div
            class="flex items-center justify-between py-2 border-b border-gray-100"
          >
            <div class="flex items-center">
              <img
                src="/icons/google-drive.svg"
                alt="Google Drive Logo"
                class="h-6 w-6 mr-3"
              />
              <span class="text-sm font-medium text-gray-700">Google Drive</span
              >
            </div>
            <div id="gdrive-status">
              <button
                id="connect-gdrive"
                class="px-3 py-1 bg-indigo-100 text-indigo-700 text-xs font-medium rounded-md hover:bg-indigo-200"
              >
                Connect
              </button>
              <span
                id="gdrive-connected-text"
                class="hidden text-sm text-green-600 font-medium"
                >Connected</span
              >
            </div>
          </div>

          <!-- Wellfound Integration -->
          <div class="flex items-center justify-between py-2">
            <div class="flex items-center">
              <img
                src="/icons/wellfound.svg"
                alt="Wellfound Logo"
                class="h-6 w-6 mr-3"
              />
              <span class="text-sm font-medium text-gray-700">Wellfound</span>
            </div>
            <div id="wellfound-status">
              <button
                id="connect-wellfound"
                class="px-3 py-1 bg-indigo-100 text-indigo-700 text-xs font-medium rounded-md hover:bg-indigo-200"
              >
                Connect
              </button>
              <span
                id="wellfound-connected-text"
                class="hidden text-sm text-green-600 font-medium"
                >Connected</span
              >
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</DashboardLayout>

<script>
  interface UserSettings {
    email_notifications_enabled: boolean;
    slack_notifications_enabled: boolean;
    default_job_visibility: string;
  }

  interface IntegrationStatus {
    wellfound?: { connected: boolean; account_id?: string };
    googleDrive?: { connected: boolean; account_email?: string };
    slack?: { connected: boolean; workspace?: string };
  }

  // Backend URL
  const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";

  // Elements
  const loadingIndicator = document.getElementById("loading-indicator");
  const settingsContent = document.getElementById("settings-content");
  const errorMessageDiv = document.getElementById("errorMessage")!;
  const errorTextP = document.getElementById("errorText")!;
  const successMessageDiv = document.getElementById("successMessage")!;
  const successTextP = document.getElementById("successText")!;

  // Form Elements
  const emailNotificationsCheckbox = document.getElementById(
    "email_notifications"
  ) as HTMLInputElement;
  const slackNotificationsCheckbox = document.getElementById(
    "slack_notifications"
  ) as HTMLInputElement;
  const defaultJobVisibilitySelect = document.getElementById(
    "default_job_visibility"
  ) as HTMLSelectElement;
  const saveNotificationButton = document.getElementById(
    "saveNotificationButton"
  ) as HTMLButtonElement;
  const saveJobButton = document.getElementById(
    "saveJobButton"
  ) as HTMLButtonElement;

  // Integration Status Elements
  const slackStatusDiv = document.getElementById("slack-status")!;
  const gdriveStatusDiv = document.getElementById("gdrive-status")!;
  const wellfoundStatusDiv = document.getElementById("wellfound-status")!;
  const connectSlackBtn = document.getElementById("connect-slack")!;
  const connectGdriveBtn = document.getElementById("connect-gdrive")!;
  const connectWellfoundBtn = document.getElementById("connect-wellfound")!;
  const slackConnectedText = document.getElementById("slack-connected-text")!;
  const gdriveConnectedText = document.getElementById("gdrive-connected-text")!;
  const wellfoundConnectedText = document.getElementById(
    "wellfound-connected-text"
  )!;

  // Message display helpers
  function showMessage(type: "success" | "error", text: string) {
    clearMessages();
    if (type === "success") {
      successTextP.textContent = text;
      successMessageDiv.classList.remove("hidden");
    } else {
      errorTextP.textContent = text;
      errorMessageDiv.classList.remove("hidden");
    }
  }

  function clearMessages() {
    errorMessageDiv.classList.add("hidden");
    successMessageDiv.classList.add("hidden");
  }

  // Initialize page
  document.addEventListener("DOMContentLoaded", () => {
    loadInitialData();
    setupEventListeners();
  });

  function setupEventListeners() {
    // Notification Settings Form
    document
      .getElementById("notificationSettingsForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        clearMessages();
        saveNotificationButton.disabled = true;
        saveNotificationButton.textContent = "Saving...";

        const settings = {
          email_notifications_enabled: emailNotificationsCheckbox.checked,
          slack_notifications_enabled: slackNotificationsCheckbox.checked,
        };

        try {
          const response = await fetch(`${backendUrl}/api/v1/settings`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(settings),
          });

          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(
              error.message || "Failed to save notification settings"
            );
          }

          showMessage("success", "Notification settings saved successfully.");
        } catch (error) {
          showMessage(
            "error",
            error instanceof Error
              ? error.message
              : "Failed to save notification settings"
          );
        } finally {
          saveNotificationButton.disabled = false;
          saveNotificationButton.textContent = "Save Notification Settings";
        }
      });

    // Job Settings Form
    document
      .getElementById("jobSettingsForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        clearMessages();
        saveJobButton.disabled = true;
        saveJobButton.textContent = "Saving...";

        const settings = {
          default_job_visibility: defaultJobVisibilitySelect.value,
        };

        try {
          const response = await fetch(`${backendUrl}/api/v1/settings`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(settings),
          });

          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || "Failed to save job settings");
          }

          showMessage("success", "Job settings saved successfully.");
        } catch (error) {
          showMessage(
            "error",
            error instanceof Error
              ? error.message
              : "Failed to save job settings"
          );
        } finally {
          saveJobButton.disabled = false;
          saveJobButton.textContent = "Save Job Settings";
        }
      });

    // Integration Connect Buttons
    connectSlackBtn.addEventListener("click", () => {
      window.location.href = `${backendUrl}/api/v1/oauth/slack/connect`;
    });
    connectGdriveBtn.addEventListener("click", () => {
      window.location.href = `${backendUrl}/api/v1/oauth/google-drive/connect`;
    });
    connectWellfoundBtn.addEventListener("click", () => {
      window.location.href = `${backendUrl}/api/v1/oauth/wellfound/connect`;
    });
  }

  async function loadInitialData() {
    if (loadingIndicator) loadingIndicator.style.display = "block";
    if (settingsContent) settingsContent.classList.add("hidden");
    clearMessages();

    try {
      // Fetch user settings
      const settingsResponse = await fetch(`${backendUrl}/api/v1/settings`, {
        credentials: "include",
      });
      if (!settingsResponse.ok) throw new Error("Failed to load settings");
      const settings: UserSettings = await settingsResponse.json();

      // Fetch integration status
      const integrationsResponse = await fetch(
        `${backendUrl}/api/v1/oauth/integrations`,
        {
          credentials: "include",
        }
      );
      if (!integrationsResponse.ok)
        throw new Error("Failed to load integration status");
      const integrations: IntegrationStatus = await integrationsResponse.json();

      // Populate form fields
      emailNotificationsCheckbox.checked =
        settings.email_notifications_enabled !== false; // Default true if undefined
      slackNotificationsCheckbox.checked =
        settings.slack_notifications_enabled || false;
      defaultJobVisibilitySelect.value =
        settings.default_job_visibility || "public";

      // Update integration status UI
      updateIntegrationUI("slack", integrations.slack);
      updateIntegrationUI("googleDrive", integrations.googleDrive);
      updateIntegrationUI("wellfound", integrations.wellfound);

      if (settingsContent) settingsContent.classList.remove("hidden");
    } catch (error) {
      console.error("Error loading initial data:", error);
      showMessage("error", "Failed to load settings. Please refresh the page.");
    } finally {
      if (loadingIndicator) loadingIndicator.style.display = "none";
    }
  }

  function updateIntegrationUI(
    type: "slack" | "googleDrive" | "wellfound",
    status?: { connected: boolean }
  ) {
    let connectBtn: HTMLElement | null = null;
    let connectedText: HTMLElement | null = null;

    switch (type) {
      case "slack":
        connectBtn = connectSlackBtn;
        connectedText = slackConnectedText;
        break;
      case "googleDrive":
        connectBtn = connectGdriveBtn;
        connectedText = gdriveConnectedText;
        break;
      case "wellfound":
        connectBtn = connectWellfoundBtn;
        connectedText = wellfoundConnectedText;
        break;
    }

    if (!connectBtn || !connectedText) return;

    if (status?.connected) {
      connectBtn.classList.add("hidden");
      connectedText.classList.remove("hidden");
      // Optional: Add disconnect button logic here if needed
    } else {
      connectBtn.classList.remove("hidden");
      connectedText.classList.add("hidden");
    }
  }
</script>
