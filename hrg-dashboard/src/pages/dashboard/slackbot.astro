---
import DashboardLayout from "../../layouts/DashboardLayout.astro";

/* SSR auth check removed */

// Initial empty state - data will be loaded client-side
const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";

// TypeScript interfaces for client-side
interface BotStatus {
  isRunning: boolean;
  lastStarted: string | null;
  channels: string[];
  allowedCommands: string[];
  settings: {
    default_channel: string;
    notify_matches: boolean;
    notify_new_resumes: boolean;
  };
}
---

<DashboardLayout title="Slack Bot - HR Genie" activePage="slackbot">
  <h1 class="text-2xl font-bold mb-6">Slack Bot</h1>

  <div id="loading-indicator" class="mb-6 text-center py-4">
    <div
      class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"
    >
    </div>
    <p class="mt-2 text-gray-600">Loading bot status...</p>
  </div>

  <div id="responseMessageContainer" class="mb-4">
    <div
      id="errorMessage"
      class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="errorText"></p>
    </div>
    <div
      id="successMessage"
      class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded"
      role="alert"
    >
      <p id="successText"></p>
    </div>
  </div>

  <div
    id="slack-not-connected"
    class="bg-yellow-50 text-yellow-800 p-4 rounded-lg mb-6"
  >
    <div class="flex items-start">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2 mt-0.5"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
          clip-rule="evenodd"></path>
      </svg>
      <div>
        <h3 class="font-medium">Slack Not Connected</h3>
        <p class="text-sm mt-1">
          You need to connect your Slack workspace before using the HR Genie
          bot.
        </p>
        <a
          href="#"
          id="connect-slack-btn"
          class="inline-block mt-2 text-sm bg-yellow-100 hover:bg-yellow-200 text-yellow-800 px-3 py-1 rounded-md"
        >
          Connect Slack Now
        </a>
      </div>
    </div>
  </div>

  <div id="slack-connected" class="space-y-8 hidden">
    <!-- Bot Control Panel -->
    <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
      <div class="bg-gray-50 px-4 py-3 border-b border-gray-200">
        <h2 class="font-medium">Bot Control</h2>
      </div>
      <div class="p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <span
              id="bot-status-indicator"
              class="inline-block h-3 w-3 rounded-full mr-2 bg-red-500"></span>
            <span id="bot-status-text" class="font-medium">Stopped</span>
          </div>

          <div class="space-x-2">
            <form id="startBotForm" class="inline-block">
              <button
                type="submit"
                id="startBotButton"
                class="px-4 py-2 rounded-md text-sm font-medium bg-green-600 text-white hover:bg-green-700"
              >
                Start Bot
              </button>
            </form>

            <form id="stopBotForm" class="inline-block">
              <button
                type="submit"
                id="stopBotButton"
                class="px-4 py-2 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed"
                disabled
              >
                Stop Bot
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Bot Configuration -->
    <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
      <div
        class="bg-gray-50 px-4 py-3 border-b border-gray-200 flex justify-between items-center"
      >
        <h2 class="font-medium">Bot Configuration</h2>
      </div>
      <div class="p-4">
        <div class="space-y-4">
          <!-- Channels -->
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-2">Channels</h3>
            <div id="channels-container" class="flex flex-wrap gap-2">
              <span
                class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
              >
                No channels configured
              </span>
            </div>
          </div>

          <!-- Commands -->
          <div>
            <h3 class="text-sm font-medium text-gray-500 mb-2">
              Allowed Commands
            </h3>
            <div id="commands-container" class="flex flex-wrap gap-2">
              <span
                class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
              >
                No commands configured
              </span>
            </div>
          </div>

          <!-- Settings Form -->
          <form id="botSettingsForm" class="mt-6 pt-6 border-t border-gray-200">
            <div class="grid grid-cols-1 gap-4">
              <div>
                <label
                  for="default_channel"
                  class="block text-sm font-medium text-gray-700 mb-1"
                >
                  Default Channel
                </label>
                <select
                  id="default_channel"
                  name="default_channel"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                >
                  <option value="" disabled selected>Select a channel</option>
                  <!-- Will be populated by JavaScript -->
                </select>
              </div>

              <div class="flex items-center">
                <input
                  type="checkbox"
                  id="notify_matches"
                  name="notify_matches"
                  checked
                  class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label
                  for="notify_matches"
                  class="ml-2 block text-sm text-gray-700"
                >
                  Notify on new resume matches
                </label>
              </div>

              <div class="flex items-center">
                <input
                  type="checkbox"
                  id="notify_new_resumes"
                  name="notify_new_resumes"
                  checked
                  class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                />
                <label
                  for="notify_new_resumes"
                  class="ml-2 block text-sm text-gray-700"
                >
                  Notify on new resumes
                </label>
              </div>

              <div>
                <button
                  type="submit"
                  id="saveSettingsButton"
                  class="w-full mt-2 px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700"
                >
                  Save Settings
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Quick Commands -->
    <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
      <div class="bg-gray-50 px-4 py-3 border-b border-gray-200">
        <h2 class="font-medium">Quick Commands</h2>
      </div>
      <div class="p-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <button
            class="text-left px-4 py-3 border border-gray-200 rounded-md hover:bg-gray-50"
          >
            <p class="font-medium">/resume fetch</p>
            <p class="text-xs text-gray-500 mt-1">
              Fetch new resumes from Google Drive
            </p>
          </button>

          <button
            class="text-left px-4 py-3 border border-gray-200 rounded-md hover:bg-gray-50"
          >
            <p class="font-medium">/job list</p>
            <p class="text-xs text-gray-500 mt-1">
              List all active job postings
            </p>
          </button>

          <button
            class="text-left px-4 py-3 border border-gray-200 rounded-md hover:bg-gray-50"
          >
            <p class="font-medium">/match run-all</p>
            <p class="text-xs text-gray-500 mt-1">
              Match all resumes against jobs
            </p>
          </button>

          <button
            class="text-left px-4 py-3 border border-gray-200 rounded-md hover:bg-gray-50"
          >
            <p class="font-medium">/help</p>
            <p class="text-xs text-gray-500 mt-1">
              Show help message with all commands
            </p>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div id="about-bot" class="mt-8 bg-indigo-50 p-4 rounded-lg">
    <h3 class="text-lg font-medium text-indigo-800 mb-2">
      About the Slack Bot
    </h3>
    <p class="text-indigo-700 text-sm">
      The HR Genie Slack bot allows you to interact with the application
      directly from your Slack workspace. You can fetch resumes, match
      candidates to jobs, and receive notifications without leaving Slack.
    </p>
  </div>
</DashboardLayout>

<script>
  // Interfaces
  interface BotStatus {
    isRunning: boolean;
    lastStarted: string | null;
    channels: string[];
    allowedCommands: string[];
    settings: {
      default_channel: string;
      notify_matches: boolean;
      notify_new_resumes: boolean;
    };
  }

  interface IntegrationStatus {
    slack?: {
      connected: boolean;
      workspace?: string;
    };
  }

  // Backend URL
  const backendUrl = import.meta.env.BACKEND_URL || "http://localhost:3000";

  // Elements
  const loadingIndicator = document.getElementById("loading-indicator");
  const slackNotConnected = document.getElementById("slack-not-connected");
  const slackConnected = document.getElementById("slack-connected");
  const aboutBot = document.getElementById("about-bot");

  const botStatusIndicator = document.getElementById("bot-status-indicator");
  const botStatusText = document.getElementById("bot-status-text");
  const startBotButton = document.getElementById(
    "startBotButton"
  ) as HTMLButtonElement;
  const stopBotButton = document.getElementById(
    "stopBotButton"
  ) as HTMLButtonElement;

  const channelsContainer = document.getElementById("channels-container");
  const commandsContainer = document.getElementById("commands-container");
  const defaultChannelSelect = document.getElementById(
    "default_channel"
  ) as HTMLSelectElement;
  const notifyMatchesCheckbox = document.getElementById(
    "notify_matches"
  ) as HTMLInputElement;
  const notifyNewResumesCheckbox = document.getElementById(
    "notify_new_resumes"
  ) as HTMLInputElement;
  const saveSettingsButton = document.getElementById(
    "saveSettingsButton"
  ) as HTMLButtonElement;

  const connectSlackBtn = document.getElementById("connect-slack-btn");

  // Message display helpers
  const errorMessageDiv = document.getElementById("errorMessage")!;
  const errorTextP = document.getElementById("errorText")!;
  const successMessageDiv = document.getElementById("successMessage")!;
  const successTextP = document.getElementById("successText")!;

  function showMessage(type: "success" | "error", text: string) {
    errorMessageDiv.classList.add("hidden");
    successMessageDiv.classList.add("hidden");
    if (type === "success") {
      successTextP.textContent = text;
      successMessageDiv.classList.remove("hidden");
    } else {
      errorTextP.textContent = text;
      errorMessageDiv.classList.remove("hidden");
    }
  }

  function clearMessages() {
    errorMessageDiv.classList.add("hidden");
    successMessageDiv.classList.add("hidden");
  }

  // Page initialization
  document.addEventListener("DOMContentLoaded", () => {
    loadInitialData();
    setupEventListeners();
  });

  function setupEventListeners() {
    // Connect Slack button
    connectSlackBtn?.addEventListener("click", (e) => {
      e.preventDefault();
      window.location.href = `${backendUrl}/api/v1/oauth/slack/connect`;
    });

    // Start Bot Form
    document
      .getElementById("startBotForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        clearMessages();
        startBotButton.disabled = true;
        startBotButton.textContent = "Starting...";
        try {
          const response = await fetch(`${backendUrl}/api/v1/bot/start`, {
            method: "POST",
            credentials: "include",
          });
          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || "Failed to start bot");
          }

          showMessage("success", "Bot started successfully.");
          updateBotStatus(true);
        } catch (error) {
          showMessage(
            "error",
            error instanceof Error ? error.message : "Failed to start bot"
          );
          updateBotStatus(false);
        } finally {
          startBotButton.disabled = false;
          startBotButton.textContent = "Start Bot";
        }
      });

    // Stop Bot Form
    document
      .getElementById("stopBotForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        clearMessages();
        stopBotButton.disabled = true;
        stopBotButton.textContent = "Stopping...";
        try {
          const response = await fetch(`${backendUrl}/api/v1/bot/stop`, {
            method: "POST",
            credentials: "include",
          });
          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || "Failed to stop bot");
          }

          showMessage("success", "Bot stopped successfully.");
          updateBotStatus(false);
        } catch (error) {
          showMessage(
            "error",
            error instanceof Error ? error.message : "Failed to stop bot"
          );
        } finally {
          stopBotButton.disabled = false;
          stopBotButton.textContent = "Stop Bot";
        }
      });

    // Bot Settings Form
    document
      .getElementById("botSettingsForm")
      ?.addEventListener("submit", async (e) => {
        e.preventDefault();
        clearMessages();
        saveSettingsButton.disabled = true;
        saveSettingsButton.textContent = "Saving...";

        const default_channel = defaultChannelSelect.value;
        const notify_matches = notifyMatchesCheckbox.checked;
        const notify_new_resumes = notifyNewResumesCheckbox.checked;

        try {
          const response = await fetch(`${backendUrl}/api/v1/bot/settings`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({
              default_channel,
              notify_matches,
              notify_new_resumes,
            }),
          });

          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.message || "Failed to save settings");
          }

          showMessage("success", "Bot settings saved successfully.");
        } catch (error) {
          showMessage(
            "error",
            error instanceof Error ? error.message : "Failed to save settings"
          );
        } finally {
          saveSettingsButton.disabled = false;
          saveSettingsButton.textContent = "Save Settings";
        }
      });
  }

  async function loadInitialData() {
    if (loadingIndicator) loadingIndicator.style.display = "block";

    try {
      // Check for Slack integration
      const integrationStatus = await fetchIntegrationStatus();
      const isSlackConnected = integrationStatus?.slack?.connected || false;

      // Show/hide sections based on Slack connection
      if (slackNotConnected) {
        slackNotConnected.style.display = isSlackConnected ? "none" : "block";
      }

      if (slackConnected) {
        slackConnected.style.display = isSlackConnected ? "block" : "none";
      }

      if (aboutBot) {
        aboutBot.style.display = isSlackConnected ? "none" : "block";
      }

      // If Slack is connected, fetch bot status
      if (isSlackConnected) {
        const botStatus = await fetchBotStatus();

        // Update UI based on bot status
        updateBotStatus(botStatus.isRunning);
        populateChannels(botStatus.channels);
        populateCommands(botStatus.allowedCommands);

        // Populate form values
        if (defaultChannelSelect) {
          populateChannelDropdown(
            botStatus.channels,
            botStatus.settings.default_channel
          );
        }

        if (notifyMatchesCheckbox) {
          notifyMatchesCheckbox.checked =
            botStatus.settings.notify_matches !== false;
        }

        if (notifyNewResumesCheckbox) {
          notifyNewResumesCheckbox.checked =
            botStatus.settings.notify_new_resumes !== false;
        }
      }
    } catch (error) {
      console.error("Error loading initial data:", error);
      showMessage("error", "Failed to load bot data. Please refresh the page.");
    } finally {
      if (loadingIndicator) loadingIndicator.style.display = "none";
    }
  }

  async function fetchIntegrationStatus(): Promise<IntegrationStatus> {
    const response = await fetch(`${backendUrl}/api/v1/oauth/integrations`, {
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error("Failed to fetch integration status");
    }

    return response.json();
  }

  async function fetchBotStatus(): Promise<BotStatus> {
    const response = await fetch(`${backendUrl}/api/v1/bot/status`, {
      credentials: "include",
    });

    if (!response.ok) {
      throw new Error("Failed to fetch bot status");
    }

    return response.json();
  }

  function updateBotStatus(isRunning: boolean) {
    if (botStatusIndicator) {
      botStatusIndicator.className = isRunning
        ? "inline-block h-3 w-3 rounded-full mr-2 bg-green-500"
        : "inline-block h-3 w-3 rounded-full mr-2 bg-red-500";
    }

    if (botStatusText) {
      botStatusText.textContent = isRunning ? "Running" : "Stopped";
    }

    if (startBotButton) {
      startBotButton.disabled = isRunning;
      startBotButton.className = isRunning
        ? "px-4 py-2 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed"
        : "px-4 py-2 rounded-md text-sm font-medium bg-green-600 text-white hover:bg-green-700";
    }

    if (stopBotButton) {
      stopBotButton.disabled = !isRunning;
      stopBotButton.className = !isRunning
        ? "px-4 py-2 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed"
        : "px-4 py-2 rounded-md text-sm font-medium bg-red-600 text-white hover:bg-red-700";
    }
  }

  function populateChannels(channels: string[]) {
    if (!channelsContainer) return;

    channelsContainer.innerHTML = "";

    if (channels.length === 0) {
      channelsContainer.innerHTML = `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          No channels configured
        </span>
      `;
      return;
    }

    channels.forEach((channel) => {
      const span = document.createElement("span");
      span.className =
        "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800";
      span.textContent = channel;
      channelsContainer.appendChild(span);
    });
  }

  function populateCommands(commands: string[]) {
    if (!commandsContainer) return;

    commandsContainer.innerHTML = "";

    if (commands.length === 0) {
      commandsContainer.innerHTML = `
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          No commands configured
        </span>
      `;
      return;
    }

    commands.forEach((command) => {
      const span = document.createElement("span");
      span.className =
        "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800";
      span.textContent = `/${command}`;
      commandsContainer.appendChild(span);
    });
  }

  function populateChannelDropdown(
    channels: string[],
    selectedChannel: string
  ) {
    if (!defaultChannelSelect) return;

    // Clear existing options except the placeholder
    while (defaultChannelSelect.options.length > 1) {
      defaultChannelSelect.remove(1);
    }

    // Add options
    channels.forEach((channel) => {
      const option = document.createElement("option");
      option.value = channel;
      option.textContent = channel;
      option.selected = channel === selectedChannel;
      defaultChannelSelect.appendChild(option);
    });
  }
</script>
