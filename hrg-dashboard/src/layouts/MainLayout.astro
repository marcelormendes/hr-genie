---
import AlertMessage from "../components/AlertMessage.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "../styles/main.css";
import "../styles/global.css";

interface Props {
  title: string;
  showNavigation?: boolean;
}

const { title, showNavigation = true } = Astro.props;

// Parse URL search params for alert messages
const url = Astro.url;
const searchParams = url.searchParams;
const currentPath = url.pathname;

// Success messages
const successMessages = {
  registered: "Registration successful! Please sign in.",
  google_drive_connected: "Google Drive connected successfully!",
  wellfound_connected: "Wellfound connected successfully!",
  slack_connected: "Slack connected successfully!",
  profile_updated: "Your profile has been updated successfully!",
  password_updated: "Your password has been changed successfully!",
} as const;
type SuccessMessageKey = keyof typeof successMessages;

// Error messages
const errorMessages = {
  unauthorized: "You must be signed in to access this page.",
  invalid_credentials: "Invalid email or password.",
  oauth: "There was a problem connecting to the service.",
  oauth_denied: "You denied access to the service.",
  invalid_response: "Invalid response from authentication provider.",
  invalid_state: "Authentication state mismatch. Please try again.",
  oauth_failed: "OAuth authentication failed. Please try again.",
  update_failed: "An error occurred while updating your information.",
  missing_fields: "Please fill in all required fields.",
  passwords_do_not_match: "New password and confirmation do not match.",
  password_too_short: "Password must be at least 8 characters long.",
  invalid_current_password: "Current password is incorrect.",
  no_password_set: "You need to set a password first.",
  login_failed: "An error occurred during login. Please try again.",
} as const;
type ErrorMessageKey = keyof typeof errorMessages;

// Get alert messages from URL
const successParam = searchParams.get("success");
const errorParam = searchParams.get("error");
const registeredParam = searchParams.get("registered");

let alertMessage: string | null = null;

// Define the specific types allowed by AlertMessage
type AlertComponentType = "success" | "error" | "warning" | "info";
let alertType: AlertComponentType = "info";

if (successParam && successParam in successMessages) {
  // Type guard 'in' ensures successParam is a valid key here
  alertMessage = successMessages[successParam as SuccessMessageKey];
  alertType = "success";
} else if (errorParam && errorParam in errorMessages) {
  // Type guard 'in' ensures errorParam is a valid key here
  alertMessage = errorMessages[errorParam as ErrorMessageKey];
  alertType = "error";
} else if (registeredParam === "true") {
  alertMessage = successMessages["registered"];
  alertType = "success";
}
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="HR Genie Connector - Connect your HR services"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <style is:inline>
      :root {
        color-scheme: dark;
      }
    </style>
  </head>
  <body class="flex flex-col min-h-screen">
    {showNavigation && <Header currentPath={currentPath} />}

    <main class="flex-grow">
      {
        alertMessage && (
          <div class="container mx-auto px-4 mt-6">
            <AlertMessage type={alertType} message={alertMessage} />
          </div>
        )
      }
      <slot />
    </main>

    {showNavigation && <Footer />}
  </body>
</html>
