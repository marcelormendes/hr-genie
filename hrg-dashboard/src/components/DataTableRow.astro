---
import { z } from "zod";
import {
  IconCircleCheckFilled,
  IconDotsVertical,
  IconGripVertical,
  IconLoader,
} from "@tabler/icons-react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { TableCell, TableRow } from "@/components/ui/table";
import { schema } from "./DataTable.astro"; // Import schema from parent

// Define Props using the imported schema type
interface Props {
  row: z.infer<typeof schema>;
}

const { row } = Astro.props as Props;
---

<TableRow key={row.id}>
  <TableCell>
    <Button
      variant="ghost"
      size="icon"
      className="text-muted-foreground size-7 hover:bg-transparent"
    >
      <IconGripVertical className="text-muted-foreground size-3" />
      <span class="sr-only">Drag to reorder</span>
    </Button>
  </TableCell>
  <TableCell>
    <div class="flex items-center justify-center">
      <Checkbox client:load />
    </div>
  </TableCell>
  <TableCell>{row.header}</TableCell>
  <TableCell>
    <div class="w-32">
      <Badge variant="outline" className="text-muted-foreground px-1.5">
        {row.type}
      </Badge>
    </div>
  </TableCell>
  <TableCell>
    <Badge variant="outline" className="text-muted-foreground px-1.5">
      {
        row.status === "Done" ? (
          <IconCircleCheckFilled className="fill-green-500 dark:fill-green-400" />
        ) : (
          <IconLoader />
        )
      }
      {row.status}
    </Badge>
  </TableCell>
  <TableCell>
    <form>
      <Label htmlFor={`${row.id}-target`} className="sr-only"> Target </Label>
      <Input
        className="hover:bg-input/30 focus-visible:bg-background dark:hover:bg-input/30 dark:focus-visible:bg-input/30 h-8 w-16 border-transparent bg-transparent text-right shadow-none focus-visible:border dark:bg-transparent"
        defaultValue={row.target}
        id={`${row.id}-target`}
      />
    </form>
  </TableCell>
  <TableCell>
    <form>
      <Label htmlFor={`${row.id}-limit`} className="sr-only"> Limit </Label>
      <Input
        className="hover:bg-input/30 focus-visible:bg-background dark:hover:bg-input/30 dark:focus-visible:bg-input/30 h-8 w-16 border-transparent bg-transparent text-right shadow-none focus-visible:border dark:bg-transparent"
        defaultValue={row.limit}
        id={`${row.id}-limit`}
      />
    </form>
  </TableCell>
  <TableCell>
    {
      row.reviewer !== "Assign reviewer" ? (
        row.reviewer
      ) : (
        <>
          <Label htmlFor={`${row.id}-reviewer`} className="sr-only">
            Reviewer
          </Label>
          <Select client:load>
            <SelectTrigger
              className="w-38 **:data-[slot=select-value]:block **:data-[slot=select-value]:truncate"
              size="sm"
              id={`${row.id}-reviewer`}
            >
              <SelectValue placeholder="Assign reviewer" />
            </SelectTrigger>
            <SelectContent align="end">
              <SelectItem value="Eddie Lake">Eddie Lake</SelectItem>
              <SelectItem value="Jamik Tashpulatov">
                Jamik Tashpulatov
              </SelectItem>
            </SelectContent>
          </Select>
        </>
      )
    }
  </TableCell>
  <TableCell>
    <DropdownMenu client:load>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          className="data-[state=open]:bg-muted text-muted-foreground flex size-8"
          size="icon"
        >
          <IconDotsVertical />
          <span class="sr-only">Open menu</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-32">
        <DropdownMenuItem>Edit</DropdownMenuItem>
        <DropdownMenuItem>Make a copy</DropdownMenuItem>
        <DropdownMenuItem>Favorite</DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem variant="destructive">Delete</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  </TableCell>
</TableRow>;
