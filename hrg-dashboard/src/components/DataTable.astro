---
import {
  DndContext,
  KeyboardSensor,
  MouseSensor,
  TouchSensor,
  closestCenter,
  useSensor,
  useSensors,
  type DragEndEvent,
  type UniqueIdentifier,
} from "@dnd-kit/core";
import { restrictToVerticalAxis } from "@dnd-kit/modifiers";
import {
  SortableContext,
  arrayMove,
  useSortable,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  IconChevronDown,
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
  IconCircleCheckFilled,
  IconDotsVertical,
  IconGripVertical,
  IconLayoutColumns,
  IconLoader,
  IconPlus,
  IconTrendingUp,
} from "@tabler/icons-react";
import {
  type ColumnDef,
  type ColumnFiltersState,
  type Row,
  type SortingState,
  type VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Area, AreaChart, CartesianGrid, XAxis } from "recharts";
import { toast } from "sonner";
import { z } from "zod";
import DataTableRow from "./DataTableRow.astro";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  type ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer";
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Simplify Props interface
interface Props {
  data: any[];
}

// Type Astro.props and destructure
const { data: initialData } = Astro.props as Props;

// Use the data
const data = initialData;

// NOTE: Schema definition can be kept if needed for validation logic,
// but removed from Props type definition for now.
export const schema = z.object({
  id: z.number(),
  header: z.string(),
  type: z.string(),
  status: z.string(),
  target: z.string(),
  limit: z.string(),
  reviewer: z.string(),
});
---

// Components that need client interactivity should be moved to separate client
components // For this example, we'll keep the interactive parts but mark them
with client:load

<div class="w-full flex-col justify-start gap-6">
  <div class="flex items-center justify-between px-4 lg:px-6">
    <Label htmlFor="view-selector" className="sr-only">View</Label>
    <Select defaultValue="outline" client:load>
      <SelectTrigger
        className="flex w-fit @4xl/main:hidden"
        size="sm"
        id="view-selector"
      >
        <SelectValue placeholder="Select a view" />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="outline">Outline</SelectItem>
        <SelectItem value="past-performance">Past Performance</SelectItem>
        <SelectItem value="key-personnel">Key Personnel</SelectItem>
        <SelectItem value="focus-documents">Focus Documents</SelectItem>
      </SelectContent>
    </Select>
    <TabsList
      className="**:data-[slot=badge]:bg-muted-foreground/30 hidden **:data-[slot=badge]:size-5 **:data-[slot=badge]:rounded-full **:data-[slot=badge]:px-1 @4xl/main:flex"
    >
      <TabsTrigger value="outline">Outline</TabsTrigger>
      <TabsTrigger value="past-performance">
        Past Performance <Badge variant="secondary">3</Badge>
      </TabsTrigger>
      <TabsTrigger value="key-personnel">
        Key Personnel <Badge variant="secondary">2</Badge>
      </TabsTrigger>
      <TabsTrigger value="focus-documents">Focus Documents</TabsTrigger>
    </TabsList>
    <div class="flex items-center gap-2">
      <DropdownMenu client:load>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" size="sm">
            <IconLayoutColumns />
            <span class="hidden lg:inline">Customize Columns</span>
            <span class="lg:hidden">Columns</span>
            <IconChevronDown />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-56">
          {/* Column visibility items will be handled by client-side JS */}
        </DropdownMenuContent>
      </DropdownMenu>
      <Button variant="outline" size="sm">
        <IconPlus />
        <span class="hidden lg:inline">Add Section</span>
      </Button>
    </div>
  </div>

  <div class="relative flex flex-col gap-4 overflow-auto px-4 lg:px-6">
    <div class="overflow-hidden rounded-lg border">
      <Table client:load>
        <TableHeader className="bg-muted sticky top-0 z-10">
          <TableRow>
            {/* Header cells will be rendered by client-side JS */}
          </TableRow>
        </TableHeader>
        <TableBody className="**:data-[slot=table-cell]:first:w-8">
          {data.map((row: any) => <DataTableRow row={row} />)}
        </TableBody>
      </Table>
    </div>
  </div>
</div>

<script>
  // Client-side JavaScript for handling interactivity
  // This will be loaded when the component is hydrated
  document.addEventListener("astro:page-load", () => {
    // Initialize any client-side functionality here
  });
</script>
